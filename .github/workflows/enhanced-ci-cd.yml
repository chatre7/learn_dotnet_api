name: Enhanced CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

# Add permissions for the workflow
permissions:
  contents: read
  pull-requests: write
  checks: write
  statuses: write

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: blogdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 9.0.x

    - name: Restore dependencies
      run: dotnet restore BlogApi.sln

    - name: Build
      run: dotnet build BlogApi.sln --no-restore

    - name: Create coverage directory
      run: |
        mkdir -p ./coverage

    - name: Run tests with coverage for Application layer
      working-directory: ./tests/Application.Tests
      run: |
        echo "Running Application layer tests with coverage..."
        dotnet test --no-build --verbosity normal \
          --logger "trx;LogFileName=../../test-results-application.trx" \
          /p:CollectCoverage=true \
          /p:CoverletOutputFormat=lcov \
          /p:CoverletOutput=../../coverage/application-lcov.info \
          /p:Include="[Application]*" \
          /p:Exclude="[Application.Tests]*"

    - name: Run tests with coverage for Infrastructure layer
      working-directory: ./tests/Infrastructure.Tests
      run: |
        echo "Running Infrastructure layer tests with coverage..."
        dotnet test --no-build --verbosity normal \
          --logger "trx;LogFileName=../../test-results-infrastructure.trx" \
          /p:CollectCoverage=true \
          /p:CoverletOutputFormat=lcov \
          /p:CoverletOutput=../../coverage/infrastructure-lcov.info \
          /p:Include="[Infrastructure]*" \
          /p:Exclude="[Infrastructure.Tests]*"

    - name: Run tests with coverage for WebApi layer
      working-directory: ./tests/WebApi.Tests
      run: |
        echo "Running WebApi layer tests with coverage..."
        dotnet test --no-build --verbosity normal \
          --logger "trx;LogFileName=../../test-results-webapi.trx" \
          /p:CollectCoverage=true \
          /p:CoverletOutputFormat=lcov \
          /p:CoverletOutput=../../coverage/webapi-lcov.info \
          /p:Include="[WebApi]*" \
          /p:Exclude="[WebApi.Tests]*"

    - name: Check test results
      run: |
        echo "Checking for test results files..."
        find . -name "*.trx" -type f
        echo "Checking for coverage files..."
        find . -name "*lcov.info" -type f
        ls -la ./coverage/ || echo "Coverage directory not found"

    - name: Install lcov reporter
      run: |
        sudo apt-get update
        sudo apt-get install -y lcov

    - name: Merge coverage reports
      run: |
        echo "Merging coverage reports..."
        # Create combined coverage file
        echo "TN:" > ./coverage/lcov.info
        for file in ./coverage/*-lcov.info; do
          if [ -f "$file" ] && [ -s "$file" ]; then
            echo "Merging $file (size: $(wc -c < "$file") bytes)"
            # Skip the first line (TN:) to avoid duplicates
            tail -n +2 "$file" >> ./coverage/lcov.info
          else
            echo "Skipping $file (empty or missing)"
          fi
        done

    - name: Check if coverage file exists and is valid
      id: check_files
      run: |
        if [ -f "./coverage/lcov.info" ] && [ -s "./coverage/lcov.info" ]; then
          # Check if the file contains valid coverage data (not just TN:)
          LINE_COUNT=$(wc -l < ./coverage/lcov.info)
          if [ "$LINE_COUNT" -gt 1 ]; then
            echo "coverage_file_exists=true" >> $GITHUB_OUTPUT
            echo "Coverage file found with valid data"
          else
            echo "coverage_file_exists=false" >> $GITHUB_OUTPUT
            echo "Coverage file exists but is empty or contains no valid data"
          fi
        else
          echo "coverage_file_exists=false" >> $GITHUB_OUTPUT
          echo "Coverage file not found or empty"
        fi

    - name: Generate coverage report
      if: steps.check_files.outputs.coverage_file_exists == 'true'
      run: |
        # Generate HTML report
        mkdir -p ./coverage/report
        genhtml --ignore-errors empty ./coverage/lcov.info --output-directory ./coverage/report

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: |
          **/*.trx
          **/coverage/
        retention-days: 30

    - name: Publish test results
      uses: EnricoMi/publish-unit-test-result-action@v2
      if: always()
      with:
        files: "**/*.trx"
      continue-on-error: true

    - name: Upload coverage report
      if: steps.check_files.outputs.coverage_file_exists == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: ./coverage/
        retention-days: 30

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build-and-test
    steps:
    - uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 9.0.x

    - name: Restore dependencies
      run: dotnet restore BlogApi.sln

    - name: Run security audit
      run: |
        echo "Running security audit..."
        dotnet list package --vulnerable --include-transitive

    - name: Run code analysis
      run: |
        echo "Running code analysis..."
        dotnet build BlogApi.sln -p:EnableNETAnalyzers=true -p:AnalysisLevel=latest -p:AnalysisMode=All

  performance-benchmark:
    name: Performance Benchmark
    runs-on: ubuntu-latest
    needs: build-and-test
    steps:
    - uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 9.0.x

    - name: Restore dependencies
      run: dotnet restore BlogApi.sln

    - name: Run benchmark tests
      run: |
        echo "Running performance benchmarks..."
        # Add benchmark tests here if you have any
        # For now, we'll just create a placeholder
        echo "No benchmark tests implemented yet"

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-and-test, security-scan]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    steps:
    - uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 9.0.x

    - name: Publish application
      run: |
        echo "Publishing application for staging..."
        dotnet publish BlogApi.sln -c Release -o ./publish

    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add your staging deployment logic here
        # This could be deploying to Azure, AWS, or any other cloud provider
        echo "Staging deployment completed"

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-and-test, security-scan, performance-benchmark]
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
    - uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 9.0.x

    - name: Publish application
      run: |
        echo "Publishing application for production..."
        dotnet publish BlogApi.sln -c Release -o ./publish

    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Add your production deployment logic here
        # This could be deploying to Azure, AWS, or any other cloud provider
        echo "Production deployment completed"

  notify:
    name: Send Notifications
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: failure()
    steps:
    - name: Send failure notification
      run: |
        echo "Workflow failed! Sending notification..."
        # Add notification logic here (email, Slack, etc.)
        echo "Notification sent"