name: Test Coverage

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: blogdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 9.0.x

    - name: Restore dependencies
      run: dotnet restore

    - name: Build
      run: dotnet build --no-restore

    - name: Run tests with coverage
      run: |
        dotnet test --no-build --verbosity normal \
          /p:CollectCoverage=true \
          /p:CoverletOutputFormat=lcov \
          /p:CoverletOutput=./coverage/lcov.info \
          /p:Threshold=80

    - name: Install lcov reporter
      run: |
        sudo apt-get update
        sudo apt-get install -y lcov

    - name: Generate coverage report
      run: |
        # Generate HTML report
        genhtml ./coverage/lcov.info --output-directory ./coverage/report
        
        # Get coverage percentage
        if [ -f "./coverage/lcov.info" ]; then
          COVERAGE_PERCENT=$(lcov --summary ./coverage/lcov.info | grep -E "lines.*:" | awk '{print $2}')
          echo "COVERAGE_PERCENT=$COVERAGE_PERCENT" >> $GITHUB_ENV
        else
          echo "COVERAGE_PERCENT=0%" >> $GITHUB_ENV
        fi

    - name: Check coverage threshold
      run: |
        # Extract the numeric part of the coverage percentage
        if [ -f "./coverage/lcov.info" ]; then
          COVERAGE_VALUE=$(echo "${{ env.COVERAGE_PERCENT }}" | sed 's/%//')
          if (( $(echo "$COVERAGE_VALUE < 80" | bc -l) )); then
            echo "Coverage is below the required threshold of 80%"
            exit 1
          else
            echo "Coverage meets the required threshold"
          fi
        else
          echo "No coverage report found"
          exit 1
        fi

    - name: Publish coverage report as artifact
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: ./coverage/
        retention-days: 30

    - name: Display coverage summary
      run: |
        echo "## Test Coverage Report" >> $GITHUB_STEP_SUMMARY
        echo "Coverage report has been generated and uploaded as an artifact." >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Metric | Coverage | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|--------|----------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Lines | ${{ env.COVERAGE_PERCENT }} | âœ… Meets threshold (80%) |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "You can download the full HTML report from the Artifacts section of this workflow run." >> $GITHUB_STEP_SUMMARY
        echo "To view the HTML report, download the artifact and open index.html in your browser." >> $GITHUB_STEP_SUMMARY