name: Test Coverage

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

# Add permissions for the workflow
permissions:
  contents: read
  pull-requests: write
  checks: write
  statuses: write

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: blogdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 9.0.x

    - name: Restore dependencies
      run: dotnet restore BlogApi.sln

    - name: Build
      run: dotnet build BlogApi.sln --no-restore

    - name: Create coverage directory
      run: |
        mkdir -p ./coverage

    - name: Run tests with coverage for Application layer
      working-directory: ./tests/Application.Tests
      run: |
        echo "Running Application layer tests with coverage..."
        dotnet test --no-build --verbosity normal \
          --logger "trx;LogFileName=../../test-results-application.trx" \
          /p:CollectCoverage=true \
          /p:CoverletOutputFormat=lcov \
          /p:CoverletOutput=../../coverage/application-lcov.info

    - name: Run tests with coverage for Infrastructure layer
      working-directory: ./tests/Infrastructure.Tests
      run: |
        echo "Running Infrastructure layer tests with coverage..."
        dotnet test --no-build --verbosity normal \
          --logger "trx;LogFileName=../../test-results-infrastructure.trx" \
          /p:CollectCoverage=true \
          /p:CoverletOutputFormat=lcov \
          /p:CoverletOutput=../../coverage/infrastructure-lcov.info

    - name: Run tests with coverage for WebApi layer
      working-directory: ./tests/WebApi.Tests
      run: |
        echo "Running WebApi layer tests with coverage..."
        dotnet test --no-build --verbosity normal \
          --logger "trx;LogFileName=../../test-results-webapi.trx" \
          /p:CollectCoverage=true \
          /p:CoverletOutputFormat=lcov \
          /p:CoverletOutput=../../coverage/webapi-lcov.info

    - name: Check test results
      run: |
        echo "Checking for test results files..."
        find . -name "*.trx" -type f
        echo "Checking for coverage files..."
        find . -name "*lcov.info" -type f
        ls -la ./coverage/ || echo "Coverage directory not found"

    - name: Install lcov reporter
      run: |
        sudo apt-get update
        sudo apt-get install -y lcov

    - name: Merge coverage reports
      run: |
        echo "Merging coverage reports..."
        # Create combined coverage file
        echo "TN:" > ./coverage/merged-lcov.info
        for file in ./coverage/*lcov.info; do
          if [ -f "$file" ]; then
            echo "Merging $file"
            cat "$file" >> ./coverage/merged-lcov.info
          fi
        done
        # Rename to lcov.info for compatibility
        mv ./coverage/merged-lcov.info ./coverage/lcov.info

    - name: Check if coverage file exists
      id: check_files
      run: |
        if [ -f "./coverage/lcov.info" ] && [ -s "./coverage/lcov.info" ]; then
          echo "coverage_file_exists=true" >> $GITHUB_OUTPUT
          echo "Coverage file found"
        else
          echo "coverage_file_exists=false" >> $GITHUB_OUTPUT
          echo "Coverage file not found or empty"
        fi

    - name: Generate coverage report
      if: steps.check_files.outputs.coverage_file_exists == 'true'
      run: |
        # Generate HTML report
        mkdir -p ./coverage/report
        genhtml ./coverage/lcov.info --output-directory ./coverage/report
        
        # Get coverage percentage
        if command -v lcov >/dev/null 2>&1; then
          COVERAGE_PERCENT=$(lcov --summary ./coverage/lcov.info | grep -E "lines.*:" | awk '{print $2}' | head -1)
          if [ -n "$COVERAGE_PERCENT" ]; then
            echo "COVERAGE_PERCENT=$COVERAGE_PERCENT" >> $GITHUB_ENV
          else
            echo "COVERAGE_PERCENT=0%" >> $GITHUB_ENV
          fi
        else
          echo "COVERAGE_PERCENT=0%" >> $GITHUB_ENV
        fi

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: |
          **/*.trx
          **/coverage/
        retention-days: 30

    - name: Publish test results
      uses: EnricoMi/publish-unit-test-result-action@v2
      if: always()
      with:
        files: "**/*.trx"
      continue-on-error: true

    - name: Check coverage threshold
      if: steps.check_files.outputs.coverage_file_exists == 'true'
      run: |
        # Extract the numeric part of the coverage percentage
        COVERAGE_VALUE=$(echo "${{ env.COVERAGE_PERCENT }}" | sed 's/%//')
        # Check if COVERAGE_VALUE is a valid number
        if [[ $COVERAGE_VALUE =~ ^[0-9]+(\.[0-9]+)?$ ]]; then
          if (( $(echo "$COVERAGE_VALUE < 80" | bc -l) )); then
            echo "Coverage is below the required threshold of 80% (${{ env.COVERAGE_PERCENT }})"
            exit 1
          else
            echo "Coverage meets the required threshold (${{ env.COVERAGE_PERCENT }})"
          fi
        else
          echo "Could not determine coverage percentage, skipping threshold check"
        fi

    - name: Publish coverage report as artifact
      if: steps.check_files.outputs.coverage_file_exists == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: ./coverage/
        retention-days: 30

    - name: Display coverage summary
      run: |
        echo "## Test Coverage Report" >> $GITHUB_STEP_SUMMARY
        if [ "${{ steps.check_files.outputs.coverage_file_exists }}" == "true" ]; then
          echo "Coverage report has been generated and uploaded as an artifact." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Metric | Coverage | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|----------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Lines | ${{ env.COVERAGE_PERCENT }} | ✅ Meets threshold (80%) |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "You can download the full HTML report from the Artifacts section of this workflow run." >> $GITHUB_STEP_SUMMARY
          echo "To view the HTML report, download the artifact and open index.html in your browser." >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ No coverage report was generated. This may be due to tests failing or coverage not being collected properly." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Please check the test execution logs for more details." >> $GITHUB_STEP_SUMMARY
        fi